//
//  ObjectCodeGenerator.swift
//  Eject
//
//  Created by Brian King on 10/18/16.
//  Copyright Â© 2016 Brian King. All rights reserved.
//

import Foundation

struct GenerationContext {
    let document: IBDocument
    var indentation: Int

    func with(indentation: Int) -> GenerationContext {
        var context = self
        context.indentation = indentation
        return context
    }
}

protocol CodeGenerator {
    func generateCode(in context: GenerationContext) -> String?
}

protocol ObjectCodeGenerator: CodeGenerator {
    func generationPhase(in context: GenerationContext) -> ObjectGenerationPhase
}

enum ObjectGenerationPhase {
    case properties
    case scopeVariable
    case configuration
    case subviews
    case constraints
}

extension IBReference {

    func generateCode(in context: GenerationContext, for generationPhase: ObjectGenerationPhase) -> [String] {
        return generators
            .filter() { $0.generationPhase(in: context) == generationPhase }
            .map() { $0.generateCode(in: context) }
            .flatMap() { $0 }
    }

    func generateCodeForConfiguration(in context: GenerationContext) -> [String] {
        var declaration = generateCode(in: context, for: .scopeVariable)
        declaration.append(contentsOf: generateCode(in: context, for: .configuration))
        return declaration
    }

}

extension IBDocument {

    func generateCode(in context: GenerationContext, for generationPhase: ObjectGenerationPhase) -> [String] {
        return references
            .map() { $0.generateCode(in: context, for: generationPhase) }
            .flatMap() { $0 }
    }

    func generateCodeForConfiguration(in context: GenerationContext) -> [String] {
        return references
            .map() { $0.generateCodeForConfiguration(in: context) }
            .flatMap() { $0 }
    }

    func generateCode() -> String {
        let generator = DefaultClassGenerator()
        let context = GenerationContext(document: self, indentation: 0)
        return generator.generateCode(in: context)
    }
}

struct DefaultClassGenerator {

    func generateCode(in context: GenerationContext) -> String {
        let document = context.document

        // This should be a Stencil Template.
        let clusters: [[String]] = [
            ["// Generated by Eject",
             "//",
             "",
             "class Foo: Bar {",
            ""],
            document.generateCode(in: context.with(indentation: 4), for: .properties),
            ["// Add initializer"],
            ["    func configureSubviews() {"],
            document.generateCodeForConfiguration(in: context.with(indentation: 8)),
            document.generateCode(in: context.with(indentation: 8), for: .subviews),
            document.generateCode(in: context.with(indentation: 8), for: .constraints),
            ["    }"],
            ]
        return clusters.flatMap() { $0 }.joined(separator: "\n")
    }

}
