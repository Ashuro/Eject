//
//  XIBParser.swift
//  Eject
//
//  Created by Brian King on 10/17/16.
//  Copyright Â© 2016 Brian King. All rights reserved.
//

import Foundation

protocol Buildable {
    func configure(parent: IBGraphable?, attributes: [String: String]) -> IBGraphable
}

protocol BuildableLookup {
    func lookupBuilder(for elementName: String) -> Buildable?
}

class XIBParser: NSObject {

    struct XMLError: Error {
        /// The error generated by XMLParser
        public let parserError: Error
        /// The line number the error occurred on.
        public let line: Int
        /// The column the error occurred on.
        public let column: Int
    }

    private let parser: XMLParser
    private let documentBuilder: DocumentBuilder

    var builderStack: [Buildable]
    var stack: [IBGraphable]

    var document: IBDocument {
        return documentBuilder.document
    }

    convenience init(content: String, documentBuilder: DocumentBuilder) throws {
        guard let data = content.data(using: String.Encoding.utf8) else {
            fatalError("Unable to convert to UTF8")
        }
        try self.init(data: data, documentBuilder: documentBuilder)
    }

    init(data: Data, documentBuilder: DocumentBuilder) throws {
        self.parser = XMLParser(data: data)
        self.documentBuilder = documentBuilder
        self.builderStack = [documentBuilder]
        self.stack = [documentBuilder.document]
        super.init()
        self.parser.delegate = self
        if parser.parse() == false {
            throw XMLError(parserError: parser.parserError!, line: parser.lineNumber, column: parser.columnNumber)
        }
    }

    var lastObject: IBGraphable? {
        return stack.last
    }

    var lastBuilder: Buildable? {
        return builderStack.last
    }

    var builderLookup: BuildableLookup {
        for builder in builderStack.reversed() {
            if let lookup = builder as? BuildableLookup {
                return lookup
            }
        }
        fatalError()
    }

}

extension XIBParser: XMLParserDelegate {
    func parser(_ parser: XMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict: [String : String]) {
        guard let builder = builderLookup.lookupBuilder(for: elementName) else {
            print("No builder found for \(elementName)")
            return
        }
        builderStack.append(builder)
        let parent = lastObject
        let nextObject = builder.configure(parent: parent, attributes: attributeDict)
        stack.append(nextObject)
    }

    func parser(_ parser: XMLParser, didEndElement elementName: String, namespaceURI: String?, qualifiedName qName: String?) {
        guard builderLookup.lookupBuilder(for: elementName) != nil else {
            return
        }
        builderStack.removeLast()
        stack.removeLast()
    }


}
